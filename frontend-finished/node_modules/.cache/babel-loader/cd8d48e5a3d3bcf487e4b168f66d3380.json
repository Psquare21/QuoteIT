{"ast":null,"code":"var _jsxFileName = \"F:\\\\UWindsor\\\\Sem4\\\\quote-it\\\\frontend-finished\\\\src\\\\shared\\\\components\\\\FormElements\\\\ImageUpload.js\";\nimport React, { useRef, useState, useEffect } from 'react';\nimport Button from './Button';\nimport './ImageUpload.css';\n\nconst ImageUpload = props => {\n  const [file, setFile] = useState();\n  const [previewUrl, setPreviewUrl] = useState();\n  const [isValid, setIsValid] = useState(false);\n  const [captions, setCaptions] = useState();\n  const filePickerRef = useRef();\n  useEffect(() => {\n    if (!file) {\n      return;\n    }\n\n    const fileReader = new FileReader();\n\n    fileReader.onload = () => {\n      setPreviewUrl(fileReader.result);\n    };\n\n    fileReader.readAsDataURL(file);\n  }, [file]);\n\n  async function onChangeFile(event, fileIsValid, _callback) {\n    if (fileIsValid) {\n      const reader = new FileReader(); // reader.readAsDataURL(event.target.files[0]);\n\n      const payload = new FormData();\n      payload.append('image', event.target.files[0]);\n      const xhr = new XMLHttpRequest();\n\n      xhr.onreadystatechange = () => {\n        if (xhr.readyState === 4 && xhr.status === 200) {\n          _callback(xhr.responseText);\n        }\n      };\n\n      xhr.open('POST', 'http://localhost:4000/predict');\n      xhr.send(payload);\n    }\n\n    event.preventDefault();\n  }\n\n  const pickedHandler = event => {\n    let pickedFile;\n    let fileIsValid = isValid;\n\n    if (event.target.files && event.target.files.length === 1) {\n      pickedFile = event.target.files[0];\n      setFile(pickedFile);\n      setIsValid(true);\n      fileIsValid = true;\n      onChangeFile(event, fileIsValid, function (captions) {\n        // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!CAPTIONS are here\n        setCaptions(captions);\n      });\n    } else {\n      setIsValid(false);\n      fileIsValid = false;\n    }\n\n    props.onInput(props.id, pickedFile, fileIsValid, captions);\n  };\n\n  const pickImageHandler = () => {\n    filePickerRef.current.click();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"form-control\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    id: props.id,\n    ref: filePickerRef,\n    style: {\n      display: 'none'\n    },\n    type: \"file\",\n    accept: \".jpg,.png,.jpeg\",\n    onChange: pickedHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: `image-upload ${props.center && 'center'}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"image-upload__preview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 9\n    }\n  }, previewUrl && /*#__PURE__*/React.createElement(\"img\", {\n    src: previewUrl,\n    alt: \"Preview\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 26\n    }\n  }), !previewUrl && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 27\n    }\n  }, \"Please pick an image.\")), /*#__PURE__*/React.createElement(Button, {\n    type: \"button\",\n    onClick: pickImageHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }\n  }, \"PICK IMAGE\")), !isValid && /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 20\n    }\n  }, props.errorText));\n};\n\nexport default ImageUpload;","map":{"version":3,"sources":["F:/UWindsor/Sem4/quote-it/frontend-finished/src/shared/components/FormElements/ImageUpload.js"],"names":["React","useRef","useState","useEffect","Button","ImageUpload","props","file","setFile","previewUrl","setPreviewUrl","isValid","setIsValid","captions","setCaptions","filePickerRef","fileReader","FileReader","onload","result","readAsDataURL","onChangeFile","event","fileIsValid","_callback","reader","payload","FormData","append","target","files","xhr","XMLHttpRequest","onreadystatechange","readyState","status","responseText","open","send","preventDefault","pickedHandler","pickedFile","length","onInput","id","pickImageHandler","current","click","display","center","errorText"],"mappings":"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","sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\n\r\nimport Button from './Button';\r\nimport './ImageUpload.css';\r\n\r\nconst ImageUpload = props => {\r\n  const [file, setFile] = useState();\r\n  const [previewUrl, setPreviewUrl] = useState();\r\n  const [isValid, setIsValid] = useState(false);\r\n\r\n  const [captions, setCaptions] = useState();\r\n\r\n  const filePickerRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (!file) {\r\n      return;\r\n    }\r\n    const fileReader = new FileReader();\r\n    fileReader.onload = () => {\r\n      setPreviewUrl(fileReader.result);\r\n    };\r\n    fileReader.readAsDataURL(file);\r\n  }, [file]);\r\n\r\nasync    function onChangeFile(event, fileIsValid, _callback) {\r\n        if(fileIsValid){\r\n          const reader = new FileReader();\r\n          // reader.readAsDataURL(event.target.files[0]);\r\n\r\n          const payload = new FormData();\r\n          payload.append('image', event.target.files[0]);\r\n          \r\n          const xhr = new XMLHttpRequest();\r\n          \r\n          xhr.onreadystatechange = () => {\r\n              if (xhr.readyState === 4 && xhr.status === 200) {\r\n                  _callback(xhr.responseText)\r\n              }\r\n          };\r\n\r\n          xhr.open('POST', 'http://localhost:4000/predict');\r\n          xhr.send(payload);\r\n        }\r\n        event.preventDefault();\r\n    }\r\n\r\n  const pickedHandler = event => {\r\n    let pickedFile;\r\n    let fileIsValid = isValid;\r\n    if (event.target.files && event.target.files.length === 1) {\r\n      pickedFile = event.target.files[0];\r\n      setFile(pickedFile);\r\n      setIsValid(true);\r\n      fileIsValid = true;\r\n      onChangeFile(event, fileIsValid, function(captions) {\r\n        // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!CAPTIONS are here\r\n        setCaptions(captions)\r\n      })\r\n    } else {\r\n      setIsValid(false);\r\n      fileIsValid = false;\r\n    }\r\n    \r\n    props.onInput(props.id, pickedFile, fileIsValid, captions);\r\n  };\r\n\r\n  const pickImageHandler = () => {\r\n    filePickerRef.current.click();\r\n  };\r\n\r\n  return (\r\n    <div className=\"form-control\">\r\n      <input\r\n        id={props.id}\r\n        ref={filePickerRef}\r\n        style={{ display: 'none' }}\r\n        type=\"file\"\r\n        accept=\".jpg,.png,.jpeg\"\r\n        onChange={pickedHandler}\r\n      />\r\n      <div className={`image-upload ${props.center && 'center'}`}>\r\n        <div className=\"image-upload__preview\">\r\n          {previewUrl && <img src={previewUrl} alt=\"Preview\" />}\r\n          {!previewUrl && <p>Please pick an image.</p>}\r\n        </div>\r\n        <Button type=\"button\" onClick={pickImageHandler}>\r\n          PICK IMAGE\r\n        </Button>\r\n      </div>\r\n      {!isValid && <p>{props.errorText}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ImageUpload;\r\n"]},"metadata":{},"sourceType":"module"}